---
  - name: copy kube-proxy kubeconfig
    template:
      src: kubeconfig.j2
      dest: "{{ kubernetes_kubeconfig.kube_proxy }}"
      owner: "{{ kubernetes_owner }}"
      group: "{{ kubernetes_group }}"
      mode: "{{ kubernetes_service_mode }}"

  - name: create /etc/kubernetes/specs directory
    file:
      path: "{{ kubernetes_spec_dir }}"
      state: directory

  - name: copy kube-proxy.yaml to remote
    template:
      src: kube-proxy.yaml
      dest: "{{ kubernetes_spec_dir }}/kube-proxy.yaml"
      owner: "{{ kubernetes_owner }}"
      group: "{{ kubernetes_group }}"
      mode: "{{ kubernetes_service_mode }}"

  - name: get the name of the kube-proxy pod running on this node
    command: kubectl get pods -l=k8s-app=kube-proxy --template {%raw%}'{{range .items}}{{if eq .spec.nodeName{%endraw%} "{{ inventory_hostname|lower }}"{%raw%}}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}'{%endraw%} -n kube-system
    register: pod_name
    when: upgrading is defined and upgrading|bool == true

  - name: start kube-proxy
    command: kubectl apply -f {{ kubernetes_spec_dir }}/kube-proxy.yaml --kubeconfig {{ kubernetes_kubeconfig_path }}
    run_once: true

  - name: delete kube-proxy pod running on this node
    command: kubectl delete pod {{ pod_name.stdout }} -n kube-system --now
    when: pod_name is defined and pod_name.stdout is defined and pod_name.stdout != ""

    # wait for pod to shutdown
  - name: wait until the kube-proxy pod running on this node is deleted
    command: kubectl get pods {{ pod_name.stdout }} --ignore-not-found=true -n kube-system
    register: poddeleted
    until: poddeleted|success and poddeleted.stdout == ""
    retries: 20
    delay: 6
    when: pod_name is defined and pod_name.stdout is defined and pod_name.stdout != ""

  - name: get desired number of kube-proxy pods
    command: kubectl get ds kube-proxy -o=jsonpath='{.status.desiredNumberScheduled}' --namespace=kube-system --kubeconfig {{ kubernetes_kubeconfig_path }}
    register: desiredPods
    until: desiredPods|success and desiredPods.stdout|int > 0
    retries: 20
    delay: 6
    run_once: true
  - name: wait until all kube-proxy pods are ready
    command: kubectl get ds kube-proxy -o=jsonpath='{.status.numberReady}' --namespace=kube-system --kubeconfig {{ kubernetes_kubeconfig_path }}
    register: readyPods
    until: desiredPods.stdout|int == readyPods.stdout|int
    retries: 20
    delay: 6
    failed_when: false # We don't want this task to actually fail (We catch the failure with a custom msg in the next task)
    run_once: true
  - name: fail if any kube-proxy pods are not ready
    fail:
      msg: "Timed out waiting for all kube-proxy pods to be ready."
    run_once: true
    when: desiredPods.stdout|int != readyPods.stdout|int